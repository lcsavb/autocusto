"""
Django settings for autocusto project.
Generated by 'django-admin startproject' using Django 2.2.6.
For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# English: base_directory
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# English: secret_key
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# English: debug
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# English: allowed_hosts
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost 127.0.0.1 [::1] cliquereceita.vps-kinghost.net 177.153.64.151 cliquereceita.com.br').split()


# SERVER CHOICE

# English: server
SERVER = os.environ.get("SERVER")

# Application definition

INSTALLED_APPS = [
    "processos.apps.ProcessosConfig",
    "medicos.apps.MedicosConfig",
    "clinicas.apps.ClinicasConfig",
    "pacientes.apps.PacientesConfig",
    "usuarios.apps.UsuariosConfig",
    "analytics.apps.AnalyticsConfig",
    "crispy_forms",
    "crispy_bootstrap4",
    "django_crontab",
    "dbbackup",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "autocusto.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "autocusto.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# Auto-detect if running inside container for database host
def get_default_db_host():
    """Return 'db' if running in container, 'localhost' otherwise"""
    import os
    import socket
    
    # Check if we can resolve 'db' hostname (indicates we're in Docker network)
    try:
        socket.gethostbyname('db')
        return 'db'
    except socket.gaierror:
        return 'localhost'

DATABASES = {
    "default": {
        "ENGINE": os.environ.get('SQL_ENGINE', 'django.db.backends.postgresql'),
        "NAME": os.environ.get('SQL_DATABASE', 'autocusto'),
        "USER": os.environ.get('SQL_USER', 'lucas'),
        "PASSWORD": os.environ.get('SQL_PASSWORD', 'rraptnor'),
        "HOST": os.environ.get('SQL_HOST', get_default_db_host()),
        "PORT": os.environ.get('SQL_PORT', '5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_USER_MODEL = "usuarios.Usuario"

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "pt-br"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/


STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR, 'static_root')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static', 'autocusto'),
]

# Static file configuration validated during development

# Cache Configuration
# Optimized for PDF generation system - short-lived cache for immediate serving
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'default-cache',
        'TIMEOUT': 3600,  # 1 hour default
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
            'CULL_FREQUENCY': 3,
        }
    },
    'pdf_cache': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'pdf-cache',
        'TIMEOUT': 300,   # 5 minutes - short-lived for immediate serving
        'OPTIONS': {
            'MAX_ENTRIES': 100,   # Small cache for immediate PDF serving
            'CULL_FREQUENCY': 2,  # Quick cleanup when full
        }
    }
}

# Configurações do Crispy
CRISPY_TEMPLATE_PACK = "bootstrap4"
CRISPY_FAIL_SILENTLY = True
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"

# Django Messages - Map message tags to Bootstrap classes
from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.ERROR: 'danger',  # Maps 'error' to 'danger' for Bootstrap
    messages.DEBUG: 'info',
}

# Login
LOGIN_REDIRECT_URL = "home"
LOGIN_URL = "login"

# PDFs

def get_static_path(*args):
    """Get static file path that works in both development and production"""
    if DEBUG:
        return os.path.join(BASE_DIR, "static", "autocusto", *args)
    else:
        return os.path.join(STATIC_ROOT, *args)

PATH_LME_BASE = get_static_path("processos", "lme_base_modelo.pdf")
PATH_RELATORIO = get_static_path("processos", "relatorio_modelo.pdf") 
PATH_EXAMES = get_static_path("processos", "sadt.pdf")
PATH_PDF_DIR = get_static_path("protocolos")

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Email settings for password reset
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # Real email sending
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'digitalproductcats@gmail.com')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'ukmi zxht fwsy yrle')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'CliqueReceita <digitalproductcats@gmail.com>')

# In production, set these environment variables:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST_USER = 'your-email@gmail.com'
# EMAIL_HOST_PASSWORD = 'your-app-password'
# DEFAULT_FROM_EMAIL = 'AutoCusto <noreply@autocusto.com>'

# Production Security Settings
if not DEBUG:
    # SSL/HTTPS Security
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True  # Fix: Prevent JS access to CSRF token
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
    
    # Note: X_FRAME_OPTIONS handled by nginx for consistency

# Enhanced Logging Configuration for Production Healthcare Application
if not DEBUG:
    # Create log directory if it doesn't exist
    import os
    os.makedirs('/var/log/django', exist_ok=True)
    
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'production': {
                'format': '[{asctime}] {levelname} {name} {process:d}.{thread:d} | {message}',
                'style': '{',
                'datefmt': '%Y-%m-%d %H:%M:%S',
            },
            'security': {
                'format': '[{asctime}] SECURITY {levelname} | {message}',
                'style': '{',
                'datefmt': '%Y-%m-%d %H:%M:%S',
            },
            'performance': {
                'format': '[{asctime}] PERF {levelname} | {message}',
                'style': '{',
                'datefmt': '%Y-%m-%d %H:%M:%S',
            },
            'audit': {
                'format': '[{asctime}] AUDIT | {message}',
                'style': '{',
                'datefmt': '%Y-%m-%d %H:%M:%S',
            },
        },
        'filters': {
            'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse',
            },
        },
        'handlers': {
            # Main application errors
            'error_file': {
                'level': 'ERROR',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': '/var/log/django/error.log',
                'maxBytes': 1024*1024*50,  # 50 MB
                'backupCount': 10,
                'formatter': 'production',
                'filters': ['require_debug_false'],
            },
            # General application info
            'info_file': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': '/var/log/django/info.log',
                'maxBytes': 1024*1024*20,  # 20 MB
                'backupCount': 7,
                'formatter': 'production',
                'filters': ['require_debug_false'],
            },
            # PDF generation specific
            'pdf_file': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': '/var/log/django/pdf.log',
                'maxBytes': 1024*1024*20,  # 20 MB
                'backupCount': 5,
                'formatter': 'performance',
                'filters': ['require_debug_false'],
            },
            # Security events
            'security_file': {
                'level': 'WARNING',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': '/var/log/django/security.log',
                'maxBytes': 1024*1024*20,  # 20 MB
                'backupCount': 30,  # Keep security logs longer
                'formatter': 'security',
                'filters': ['require_debug_false'],
            },
            # Database operations
            'db_file': {
                'level': 'WARNING',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': '/var/log/django/database.log',
                'maxBytes': 1024*1024*20,  # 20 MB
                'backupCount': 7,
                'formatter': 'production',
                'filters': ['require_debug_false'],
            },
            # Audit trail for healthcare compliance
            'audit_file': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': '/var/log/django/audit.log',
                'maxBytes': 1024*1024*50,  # 50 MB
                'backupCount': 365,  # Keep audit logs for 1 year
                'formatter': 'audit',
                'filters': ['require_debug_false'],
            },
            # Console output for container logs
            'console': {
                'level': 'WARNING',
                'class': 'logging.StreamHandler',
                'formatter': 'production',
            },
        },
        'root': {
            'handlers': ['error_file', 'console'],
            'level': 'INFO',
        },
        'loggers': {
            # Django framework
            'django': {
                'handlers': ['error_file', 'console'],
                'level': 'WARNING',
                'propagate': False,
            },
            'django.security': {
                'handlers': ['security_file', 'error_file'],
                'level': 'WARNING',
                'propagate': False,
            },
            'django.db.backends': {
                'handlers': ['db_file'],
                'level': 'WARNING',
                'propagate': False,
            },
            # Application modules
            'processos': {
                'handlers': ['info_file', 'error_file'],
                'level': 'INFO',
                'propagate': False,
            },
            'processos.pdf': {
                'handlers': ['pdf_file', 'error_file'],
                'level': 'INFO',
                'propagate': False,
            },
            'usuarios': {
                'handlers': ['audit_file', 'security_file', 'info_file'],
                'level': 'INFO',
                'propagate': False,
            },
            'medicos': {
                'handlers': ['audit_file', 'info_file'],
                'level': 'INFO',
                'propagate': False,
            },
            'pacientes': {
                'handlers': ['audit_file', 'info_file'],
                'level': 'INFO',
                'propagate': False,
            },
            'clinicas': {
                'handlers': ['audit_file', 'info_file'],
                'level': 'INFO',
                'propagate': False,
            },
            # Security and audit
            'security': {
                'handlers': ['security_file', 'error_file', 'console'],
                'level': 'WARNING',
                'propagate': False,
            },
            'audit': {
                'handlers': ['audit_file'],
                'level': 'INFO',
                'propagate': False,
            },
        },
    }
else:
    # Development logging - simpler and more verbose
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'dev': {
                'format': '[{asctime}] {levelname} {name} | {message}',
                'style': '{',
                'datefmt': '%H:%M:%S',
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'dev',
            },
        },
        'root': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'loggers': {
            'processos': {
                'handlers': ['console'],
                'level': 'DEBUG',
                'propagate': False,
            },
            'django.db.backends': {
                'handlers': ['console'],
                'level': 'INFO',  # Show SQL queries in development
                'propagate': False,
            },
        },
    }


# Django-crontab configuration
CRONJOBS = [
    ('0 3 * * *', 'django.core.management.call_command', ['cleanup_pdfs']),
    ('0 2 * * *', 'django.core.management.call_command', ['dbbackup']),
    ('15 2 * * *', 'django.core.management.call_command', ['upload_backup']),
    ('30 1 * * *', 'django.core.management.call_command', ['calculate_daily_metrics']),
]

# Django-dbbackup configuration
DBBACKUP_FILENAME_TEMPLATE = 'autocusto_db_{datetime}.{extension}'
DBBACKUP_CLEANUP_KEEP = 7  # Keep 7 days of backups

# GPG encryption for backups
DBBACKUP_GPG_RECIPIENT = 'lcsavb@gmail.com'

# For now, use local storage - we'll set up custom Nextcloud upload separately
DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': '/var/backups/autocusto/'}
